final String version = "0.1-A"
final String buildDirectory="${project.rootDir}/jme3-alloc/build/classes/java/main/"
final String nativeObjects="${project.rootDir}/jme3-alloc-native/build/"

task copyNatives(type: Copy) {
    from "${nativeObjects}"
    into "${buildDirectory}"
}

tasks.register("prepareOutputDirectory", UnixScriptRunner) {
   script = "./helper-scripts/prepare-output-directory.sh"
}

tasks.register("compileX86", UnixScriptRunner) {
   dependsOn("prepareOutputDirectory")
 
   boolean isWindows = System.getProperty("os.name").contains("Windows");
   boolean isMacos = System.getProperty("os.name").contains("Mac");
   boolean isLinux = System.getProperty("os.name").contains("Linux");
   
   boolean isCompileWindowsX86 = compileWindowsX86 == "true"
   boolean isCompileMacX86 = compileMacX86 == "true"
   boolean isCompileLinuxX86 = compileLinuxX86 == "true"
   
   if (isWindows && isCompileWindowsX86) {
       /* compile x86 for Windows */
       println("Compiling X86 Binary for Windows")
       script = "./helper-scripts/compile-x86.sh"
   } else if (isMacos && isCompileMacX86) {
       /* compile x86 for MacOSx */
       println("Compiling X86 Binary for MacOS")
       script = "./helper-scripts/compile-x86.sh"
   } else if (isLinux) {
       /* compile for linux */
       println("Compiling X86 Binary for Linux")
       script = "./helper-scripts/compile-x86.sh"
   } else {
       script = ""
   }
}

tasks.register("compileX86_64", UnixScriptRunner) {
   dependsOn("prepareOutputDirectory")
   script = "./helper-scripts/compile-x86-64.sh"
}

abstract class UnixScriptRunner extends DefaultTask {
    @Input
    abstract Property<String> getScript()

    @TaskAction
    def execute() {
        String command = "bash";
        String[] chmod = new String[] { "chmod", "+rwx" };

        if (System.getProperty("os.name").contains("Windows")) {
            println(System.getProperty("os.name"))
            command = "C:\\Program Files\\Git\\bin\\bash.exe"
        }
        
        /* execute the shell script in a unix process that inheirt from the current environment */
        Process permissioning = Runtime.getRuntime().exec(new String[] { chmod[0], chmod[1], script.get() });

        if (permissioning.waitFor()) {
            println("Permissioning Failed !")
        }
        
        /* release resources */
        permissioning.destroy(); 
        permissioning = null;
        
        Process run = Runtime.getRuntime().exec(new String[] { command, script.get() });
        
        if (run.waitFor()) {
            println("Run Failed !")
        }
        
        /* release resources */
        run.destroy();
        run = null;
        command = null;
        chmod = null;
    }
}
