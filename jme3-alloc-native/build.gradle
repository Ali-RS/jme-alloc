
final String version = "0.1-A"
final String buildDirectory="${project.rootDir}/jme3-alloc/build/classes/java/main/"
final String nativeObjects="${project.rootDir}/jme3-alloc-native/build/"

task copyNatives(type: Copy) {
    from "${nativeObjects}"
    into "${buildDirectory}"
}

tasks.register("prepareOutputDirectory", UnixScriptRunner) {
   script = "./helper-scripts/prepare-output-directory.sh"
}

tasks.register("compileX86", UnixScriptRunner) {
   dependsOn("prepareOutputDirectory")
   script = "./helper-scripts/compile-x86.sh"
}

tasks.register("compileX86_64", UnixScriptRunner) {
   dependsOn("prepareOutputDirectory")
   script = "./helper-scripts/compile-x86-64.sh"
}

abstract class UnixScriptRunner extends DefaultTask {
    @Input
    abstract Property<String> getScript()

    @TaskAction
    def execute() {
        String command = "bash";
        String[] chmod = new String[] { "chmod", "+rwx" };
        
        if (System.getProperty("os.name").equals("Windows")) {
            command = "bash.exe"
        }
        
        /* execute the shell script in a unix process that inheirt from the current environment */
        Process permissioning = Runtime.getRuntime().exec(new String[] { chmod[0], chmod[1], script.get() });
        println(System.getenv())
        if (permissioning.waitFor()) {
            println("Permissioning Failed !")
        }
        
        permissioning.destroy(); 
        permissioning = null;
        
        Process run = Runtime.getRuntime().exec(new String[] { command, script.get() });
        
        if (run.waitFor()) {
            println("Run Failed !")
        }
        
        run.destroy();
        run = null;
        command = null;
        chmod = null;
    }
}
